#!/bin/bash
#
# Simple Shell for Demo
# Jerome.Blanchet@NetApp.com
#
# Environment variiable setup
# KSHELL_CMDLSTFILE  : File containing the list of command to be executed during demo
#
version=0.2

BASENAME=`basename $0`
DIRNAME=`dirname $0`

[ -z "$KSHELL_PROMPT" ] && KSHELL_PROMPT="\e[1;32mkshell\e[0m # "
[ -z "$KSHELL_RUN" ] && KSHELL_RUN=1

TMPCINDEXFILE=/tmp/kshell_index.txt
TMPHISTORY=/tmp/kshell_history.$$
TMPEXFILE=/tmp/kshell_run.$$

print_help(){
	echo -e ""
	echo -e "NAME"
	echo -e "\t\tkshell - run a shell to simulate UNIX customer demo by simple to a return between each command"
	echo -e "\t\tSYNOPSIS"
	echo -e "\t\tkshell [OPTIONS]"
	echo
	echo -e "DESCRIPTION"
	echo -e "\t\t-f FILE: specify FILE containing list of command to execute during demo"
	echo -e "\t\t-z reset the command line index to the first command"
	echo -e "\t\t-h print Help "
	echo -e ""
	echo -e "SHELL GRAMMAR"
	echo -e "\t\tunix_command"
	echo -e "\t\t\tExecute any existing unix command"
	echo -e "\t\t[carriage return]"
	echo -e "\t\t\tExecute the next command in the list"
	echo -e "\t\tstart"
	echo -e "\t\t\tStart execute mode"
	echo -e "\t\tstop"
	echo -e "\t\t\tStop execute mode"
	echo -e "\t\tlist or l"
	echo -e "\t\t\tPrint the command list to execute"
	echo -e "\t\tindex or i"
	echo -e "\t\t\tPrint the current index"
	echo -e "\t\tnext or n"
	echo -e "\t\t\tPrint the next command to execute"
	echo -e "\t\tjump or j"
	echo -e "\t\t\tJump to the next command in the list"
	echo -e "\t\tback or b"
	echo -e "\t\t\tBack to the preview command in the list"
	echo -e "\t\treset-index or ri "
	echo -e "\t\t\tReset the command line index to the first command"
	echo -e "\t\thistory or h"
	echo -e "\t\t\tDisplay history command Line"
	echo -e "\t\texit or quit"
	echo -e "\t\t\tExit kshell"
	echo -e "\t\texit-reset-index"
	echo -e "\t\t\tExit kshell and reset the Command list index"
	echo -e ""
	echo -e "SHELL ENVIRONMENT VARIABLES"
	echo -e "\t\tKSHELL_CMDLSTFILE"
	echo -e "\t\t\tSpecify your default List Command File to execute during demo"
	echo -e "\t\tKSHELL_PROMPT"
	echo -e "\t\t\tSet your own prompt"
	echo -e ""
	echo -e "SEE ALSO"
	echo -e "\t\tFull documentation <https://github.com/jbnetapp>"
	echo -e ""
}

clean_and_exit(){
	[ -f $TMPEXFILE ] && rm $TMPEXFILE
	[ -f $TMPHISTORY ] && rm $TMPHISTORY
	echo "KSHELL_CINDEX=$cindex" > $TMPCINDEXFILE
	if [ -z $1 ] ; then
		tput reset
	else
		[ $1 -eq 0 ] && tput reset
	fi
	exit $1 
}

get_cmdline(){
	GETCMD="$1"
	while IFS="" read -u 1 -r -s -n1 c ; do
		echo -n "$c"
		((${#c}==0)) && break
		case "$c" in
			$'\x1b')
				tput sc
				read -u 1 -r -s -n1 -t 0.1 ctmp 
				# Handle ESC sequence
				if [[ "$ctmp" == "[" ]]; then
					# Arrow
					read -u 1 -r -s -n1 -t 0.1 ctmp
					case "$ctmp" in
						"A") # Arrow Up
							if [ $hindex -eq 1 ]; then
								GETCMD=`head -$hindex $TMPHISTORY | tail +$hindex`
							fi
							if [ $hindex -gt 1 ]; then
								hindex=$(($hindex - 1))
								GETCMD=`head -$hindex $TMPHISTORY | tail +$hindex`
							fi
							tput rc; tput el; echo -n "$GETCMD" ; tput rc ;
							continue ;;
						"B") # Arrow down
							hcount=`cat $TMPHISTORY | wc -l` ; hcount=$(($hcount - 1))
							if [ $hindex -eq 1 ]; then
								GETCMD=`head -$hindex $TMPHISTORY | tail +$hindex`
							fi
							if [ $hindex -le $hcount ]; then
								hindex=$(($hindex + 1))
								GETCMD=`head -$hindex $TMPHISTORY | tail +$hindex`
							fi
							tput rc; tput el; echo -n "$GETCMD" ; tput rc ;
							continue ;;
						"C")
							tput rc
							continue ;;
						"D")
							tput rc
							continue ;;
					esac
				fi
				read -u 1 -r -s -n1 -t 0.1
				continue;;
			$'\177')
				# Handle Backspace 
				if [ ${#GETCMD} -gt 0 ]; then
					GETCMD="${GETCMD::-1}"
					printf "\010\040\010\033[P"
				fi
				continue;;
			$'\016')
				# Handle CTRL-N
				echo; echo -n -e $KSHELL_PROMPT ; echo -n " "
				continue;;
			$'\030')
				# Handle CTRL-X
				GETCMD="exit"
				echo; echo -n -e $KSHELL_PROMPT ; echo -n " "
				continue;;
					
		esac
		GETCMD="${GETCMD}${c}"
	done
}

cli_print() {
 	CMD="$1"
	if [ -z "$CMD" ] ; then
		echo ; return
	fi
	stty -F /dev/tty -echo
 	for i in $(seq 1 ${#CMD}); do
       		echo -n "${CMD:i-1:1}"
		if [ "${CMD:i-1:1}" == " " ] ; then
       			sleep 0.08
		else 
       			sleep 0.06
		fi
 	done
	read -u 1; stty -F /dev/tty echo
}

run_loop() {
 	CMD="$1"
	if [ -z "$CMD" ] ; then
		echo -n -e $KSHELL_PROMPT ; echo -n " "
	fi
	get_cmdline "$CMD" 
	CMD="$GETCMD"
	while [ ! -z "$CMD" ]; do
		if [ "$CMD" == "start" ] ; then
			echo ; export KSHELL_RUN=1 ; CMD=""
		fi
		if [ "$CMD" == "stop" ] ; then
			echo ; export KSHELL_RUN=0 ; CMD=""
		fi
		if [ "$CMD" == "status" ] ; then
			echo ; echo $KSHELL_RUN; CMD=""
		fi
		if [ "$CMD" == "index" ] || [ "$CMD" == "i" ] ; then
			echo ; echo $cindex; CMD=""
		fi
		if [ "$CMD" == "list" ] || [ "$CMD" == "l" ] ; then
			CMD="cat -n $KSHELL_CMDLSTFILE"
		fi
		if [ "$CMD" == "whoami" ] ; then
			echo ; echo $BASENAME; CMD=""
		fi
		if [ "$CMD" == "history" ] || [ "$CMD" == "h" ] ; then
			echo ; cat -n $TMPHISTORY ; CMD=""
		fi
		if [ "$CMD" == "history-index" ] || [ "$CMD" == "hi" ] ; then
			echo ; echo $hindex; CMD=""
		fi
		if [ "$CMD" == "next" ] || [ "$CMD" == "n" ] ; then
			next_command=`cat -n $KSHELL_CMDLSTFILE | head -$cindex | tail +$cindex`
			echo ; echo $next_command ; CMD=""
		fi
		if [ "$CMD" == "help" ] ; then
			print_help |more
			echo; CMD=""
		fi
		if [ "$CMD" == "reset-index" ] || [ "$CMD" == "ri" ]; then
			cindex=1
			echo; CMD=""
		fi
		if [ "$CMD" == "back" ] || [ "$CMD" == "b" ]  ; then
			[ $cindex -gt 1 ] && cindex=$(($cindex - 1))
			echo; CMD=""
		fi
		if [ "$CMD" == "jump" ] || [ "$CMD" == "j" ] ; then
			cindex=$(($cindex + 1))
			echo; CMD=""
		fi
		if [ "$CMD" == "exit" ] || [ "$CMD" == "quit" ] ; then
			echo; clean_and_exit 0
		fi
		if [ "$CMD" == "exit-reset-index" ] ; then
			cindex=1
			echo; clean_and_exit 0
		fi
		if [ ! -z "$CMD" ]; then
 			echo; echo $CMD > $TMPEXFILE; chmod +x $TMPEXFILE
 			$TMPEXFILE ;
			if [ $? -eq 0 ] ; then
				LASTCMD=`tail -1 $TMPHISTORY`
				if [ "$CMD" != "$LASTCMD" ] ; then
					hcount=`cat $TMPHISTORY | wc -l`
					hindex=$(($hcount + 1))
					echo -e "${CMD}" >> $TMPHISTORY
				fi
				CMD=""
			fi
		fi
		echo -n -e $KSHELL_PROMPT ;  echo -n " " 
		get_cmdline
		CMD="$GETCMD"
 	done
	return 0
}

#
# MAIN
#

trap "clean_and_exit 1" 2

[ -f $TMPCINDEXFILE ] && source $TMPCINDEXFILE
[ ! -f $TMPHISTORY ] && touch $TMPHISTORY

usage="usage kshell [-f filename] [-z] [-h]"
while getopts ":f:zh" o; do
	case ${o} in
		f)
			KSHELL_CMDLSTFILE=$OPTARG
			;;
		z)
			KSHELL_CINDEX=1
			;;
		h)
			print_help |more
			clean_and_exit 0
			;;
                *)
			echo "Error unknown option: $usage" 255
			clean_and_exit 1
			;;
                esac
done
shift $((OPTIND-1))

[ -z $KSHELL_CMDLSTFILE ] && KSHELL_CMDLSTFILE=${DIRNAME}/kshell-listcmd.txt

if [ ! -f $KSHELL_CMDLSTFILE ]; then
	echo "ERROR: KSHELL_CMDLSTFILE: $KSHELL_CMDLSTFILE no such file"
	clean_and_exit 1
fi

# Setup Indexes
[ -z $KSHELL_CINDEX ] && KSHELL_CINDEX=1
cindex=$KSHELL_CINDEX
hindex=0

# Start kshell
while [ true ] ; do
        run_loop "$CMD"
	if [ $KSHELL_RUN -eq 0 ]; then
		CMD=""
	else
		CMD=`head -$cindex $KSHELL_CMDLSTFILE | tail +$cindex`
		cindex=$(($cindex + 1))
	fi
 	cli_print "$CMD"
done

clean_and_exit 0
